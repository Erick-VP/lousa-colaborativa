import asyncio
import websockets
import json
import os
import logging

# Configura o log para ser mais claro
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# --- Vari√°veis Globais ---
connected_clients = set()
drawing_history = []

# --- Fun√ß√µes Principais ---

async def handle_connection(websocket):
    """
    Lida com um cliente que se conectou com sucesso.
    """
    # Adiciona o cliente √† lista de conectados
    connected_clients.add(websocket)
    logging.info(f"‚úÖ Cliente conectado. Total de usu√°rios: {len(connected_clients)}")

    try:
        # Envia o hist√≥rico de desenhos para o novo cliente
        if drawing_history:
            await websocket.send(json.dumps({"type": "history", "data": drawing_history}))

        # Fica escutando por novas mensagens (desenhos) do cliente
        async for message in websocket:
            data = json.loads(message)
            
            # Adiciona o novo desenho ao hist√≥rico
            drawing_history.append(data)
            
            # Envia o desenho para todos os outros clientes conectados
            other_clients = connected_clients - {websocket}
            if other_clients:
                websockets.broadcast(other_clients, message)

    except websockets.exceptions.ConnectionClosedError:
        logging.info("üîå Conex√£o perdida de forma inesperada.")
    except websockets.exceptions.ConnectionClosedOK:
        logging.info("üëã Cliente desconectou normalmente.")
    finally:
        # Remove o cliente da lista ao desconectar
        connected_clients.remove(websocket)
        logging.info(f"üìâ Cliente removido. Usu√°rios restantes: {len(connected_clients)}")

async def main():
    """
    Fun√ß√£o principal que inicia o servidor e lida com as conex√µes.
    """
    # ESTA √â A PARTE IMPORTANTE:
    # O 'handler' principal que decide o que fazer com cada nova conex√£o.
    async def health_check_handler(websocket, path):
        try:
            # Se a conex√£o for um WebSocket v√°lido, passa para a nossa l√≥gica principal
            await handle_connection(websocket)
        except websockets.exceptions.InvalidMessage:
            # Se for uma requisi√ß√£o HTTP inv√°lida (como a do Render),
            # ele captura o erro e simplesmente IGNORA, mantendo o servidor VIVO.
            logging.warning("‚ö†Ô∏è Requisi√ß√£o HTTP inv√°lida foi ignorada. Servidor continua de p√©.")
            return  # Encerra o handler para esta conex√£o espec√≠fica, sem travar.

    port = int(os.environ.get("PORT", 8765))
    host = "0.0.0.0"
    
    logging.info(f"üöÄ Servidor WebSocket iniciando em {host}:{port}")
    
    # Inicia o servidor usando nosso handler "√† prova de balas"
    async with websockets.serve(health_check_handler, host, port):
        await asyncio.Future()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë Servidor encerrado manualmente.")











# import asyncio
# import websockets
# import json
# import os

# connected = set()
# drawing_history = []

# async def server(websocket):
#     """Gerencia conex√µes de clientes WebSocket"""
    
#     connected.add(websocket)
#     print(f"‚úÖ Cliente conectado: {websocket.remote_address}")
#     print(f"üìä Total de clientes: {len(connected)}")

    
#     if drawing_history:
#         await websocket.send(json.dumps({
#             "type": "history", 
#             "data": drawing_history
#         }))

#     try:
#         async for message in websocket:
#             data = json.loads(message)

#             drawing_history.append(data)

#             websockets_to_remove = set()
#             for conn in connected:
#                 if conn != websocket:
#                     try:
#                         await conn.send(message)
#                     except Exception as e:
#                         print(f"‚ùå Erro ao enviar: {e}")
#                         websockets_to_remove.add(conn)
            
#             connected.difference_update(websockets_to_remove)

#     except websockets.exceptions.ConnectionClosedOK:
#         print(f"üëã Cliente desconectado: {websocket.remote_address}")
#     except websockets.exceptions.ConnectionClosedError as e:
#         print(f"‚ö†Ô∏è Conex√£o perdida: {e}")
#     except Exception as e:
#         print(f"‚ùå Erro: {e}")
#     finally:
#         if websocket in connected:
#             connected.remove(websocket)
#         print(f"üìä Clientes restantes: {len(connected)}")

# async def main():
#     """Fun√ß√£o principal para iniciar o servidor"""
    
#     # ‚ö†Ô∏è MUDAN√áAS AQUI ‚ö†Ô∏è
#     port = int(os.environ.get("PORT", 8765))  # Usa porta do ambiente ou 8765
#     host = "0.0.0.0"  # ‚ö†Ô∏è IMPORTANTE: Mudar de "localhost" para "0.0.0.0"
    
#     print("üöÄ Iniciando servidor WebSocket...")
#     print(f"‚úÖ Servidor rodando em ws://{host}:{port}")
#     print("‚è≥ Aguardando conex√µes... (Ctrl+C para parar)\n")
    
#     # ‚ö†Ô∏è MUDAN√áA AQUI TAMB√âM ‚ö†Ô∏è
#     async with websockets.serve(server, host, port):
#         await asyncio.Future()

# if __name__ == "__main__":
#     try:
#         asyncio.run(main())
#     except KeyboardInterrupt:
#         print("\nüõë Servidor encerrado")